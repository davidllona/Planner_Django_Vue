function dragAndDrop() {
  let currentDraggingPeriod = null;
  $(document).on("dragstart", ".period .center-span", function (event) {
    currentDraggingPeriod = $(this).closest(".period");
    let position = currentDraggingPeriod.attr("data-position");
    event.originalEvent.dataTransfer.setData("text", position);
  });

  $(document).on("dragover", ".cell", function (event) {
    event.preventDefault();
  });

  $(document).on("dragenter", ".cell", function (event) {
    event.preventDefault();
  });

  $(document).on("drop", ".cell", function (event) {
    if ($(this).hasClass("occupied")) {
      return;
    }
    
    let currentperiod = $(this).parent().attr("data-position");
    let sourceperiod = currentDraggingPeriod.attr("data-position");
    currentDraggingPeriod.attr("data-position", currentperiod);
    currentDraggingPeriod.detach().appendTo($(this));
    console.log("Current Position: " + currentperiod);
    console.log("Source Position: " + sourceperiod);
    
    let taskperiod = $(".tasks-periods[data-position='" + sourceperiod + "']");
    let currentPeriod = $(this).find(".period");
    let currentStart = new Date(currentPeriod.attr("data-start-day"));
    let currentEnd = new Date(currentPeriod.attr("data-end-day"));
    
    console.log("CurrentStart: " + currentStart);
    console.log("CurrentEnd: " + currentEnd);
    
    
   
    let daysCount = getBusinessDaysCount(currentStart, currentEnd);
    console.log("Days count between currentStart and currentEnd: " + daysCount);
    let new_start_date = new Date($(this).closest(".cell").attr("data-date"));
    let new_end_date = new Date(new_start_date);
    new_end_date.setDate(new_end_date.getDate() + daysCount + 1); // Restar 1 ya que el día de inicio se cuenta como día laborable
    console.log(new_end_date);
      
    
    
    taskperiod.detach();
    if (currentperiod < sourceperiod) {
      taskperiod.insertBefore(
        $(".tasks-periods[data-position='" + currentperiod + "']")
      );
    } else {
      taskperiod.insertAfter(
        $(".tasks-periods[data-position='" + currentperiod + "']")
      );
    }
    taskperiod.attr("data-position", currentperiod);
    
    let taskperiods = $(".tasks-periods");
    taskperiods.each(function (i) {
      $(this).attr("data-position", i + 1);
      let periods = $(this).find(".period");
      periods.each(function () {
        $(this).attr("data-position", i);
      });
    });
    
    let period = currentDraggingPeriod;
    let cell = period.closest(".cell");
    let dayStart = cell.attr("data-position");
    period.attr("data-day-start", dayStart);
    
    
    
    //Esto cuando se mueve el period si se actualiza el id
    let period_id = period.attr("data-id");
    console.log("Id del period: " + period_id);
    let new_task_id = $(this).closest(".task").attr("data-id");
    console.log("Id del task: " + new_task_id);
    
    console.log("El dia inical actualizado es: " + new_start_date);
  });
  
  $(document).on("dragend", ".period", function (event) {
    currentDraggingPeriod = null;
  });
}

function getBusinessDaysCount(startDate, endDate) {
  let count = 0;
  let currentDate = new Date(startDate.getTime());
  while (currentDate <= endDate) {
    let dayOfWeek = currentDate.getDay();
    if (dayOfWeek != 0 && dayOfWeek != 6) {
      count++;
    }
    currentDate.setDate(currentDate.getDate() + 1);
  }
  return count;
}